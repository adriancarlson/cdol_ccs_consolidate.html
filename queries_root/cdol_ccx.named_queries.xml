<queries>
	<query name="net.cdolinc.contacts.duplicates.list" flattened="true">
		<summary>CDOL: Duplicate Contacts</summary>
        <args>
			<arg name="params" type="array" required="true" />
        </args>
		<columns>
			<column column="person.lastname">contact_ids_duplicates</column>
			<column column="person.lastname">last_name_first_initial</column>
			<column column="person.lastname">mobile_phone</column>
			<column column="person.lastname">email_address</column>
			<column column="person.lastname">street_address</column>
		</columns>
		<sql>
			<![CDATA[
SELECT
	duplicates.contact_ids_duplicates,
	initcap(duplicates.last_name_first_initial) AS last_name_first_initial,
	duplicates.mobile_phone,
	duplicates.email_address,
	duplicates.street_address
FROM
	(
		SELECT
			last_name_first_initial,
			mobile_phone,
			email_address,
			street_address,
			listagg(person_id, ', ') within GROUP (
				ORDER BY
					last_name_first_initial,
					mobile_phone,
					email_address,
					street_address
			) AS contact_ids_duplicates
		FROM
			(
				SELECT
					UNIQUE p.id person_id,
					CASE
						WHEN 'N' IN (:params) THEN lower(p.lastname) || ', ' || lower(substr(p.firstname, 1, 3))
						ELSE ''
					END last_name_first_initial,
					CASE
						WHEN 'P' IN (:params) THEN pn.phonenumber
						ELSE ''
					END mobile_phone,
					CASE
						WHEN 'E' IN (:params) THEN lower(ea.emailaddress)
						ELSE ''
					END email_address,
					CASE
						WHEN 'S' IN (:params) THEN translate(
							lower(pa.street),
							'0123456789abcdefghijklmnopqrstuvwxyz' || lower(pa.street),
							'0123456789abcdefghijklmnopqrstuvwxyz'
						)
						ELSE ''
					END street_address
				FROM
					person p
					LEFT JOIN personphonenumberassoc ppna ON ppna.personid = p.id AND ppna.phonetypecodesetid = 13 
					LEFT JOIN phonenumber pn ON pn.phonenumberid = ppna.phonenumberid AND ppna.phonetypecodesetid = 13 
					LEFT JOIN personemailaddressassoc  peaa ON peaa.personid = p.id
					LEFT JOIN emailaddress ea ON ea.emailaddressid = peaa.emailaddressid 
					LEFT JOIN personaddressassoc paa ON paa.personid = p.id
					LEFT JOIN personaddress pa ON pa.personaddressid = paa.personaddressid 
					LEFT JOIN studentcontactassoc sca ON sca.personid = p.id
					LEFT JOIN u_person_additional_info ad ON ad.personid  = p.id
					LEFT JOIN students stu ON stu.dcid = sca.studentdcid
				WHERE
					(stu.enroll_status in (-1,0) OR 'I' IN (:params))
					AND (
							p.lastname is NOT NULL
							OR 'N' NOT IN (:params)
						)					
					AND (
						pn.phonenumber IS NOT NULL
						OR 'P' NOT IN (:params)
					)
					AND (
						ea.emailaddress IS NOT NULL
						OR 'E' NOT IN (:params)
					)
					AND (
						pa.street IS NOT NULL
						OR 'S' NOT IN (:params)
					)
					AND (
						ad.person_dfp IS NULL 
						OR 
						ad.person_dfp = 0
					)
				UNION
				SELECT
					gpa.personid,
					CASE
						WHEN 'N' IN (:params) THEN lower(g.lastname) || ', ' || lower(substr(g.firstname, 1, 3))
						ELSE ''
					END,
					'' AS mobile_phone,
					CASE
						WHEN 'E' IN (:params) THEN lower(pcasec.emailaddress)
						ELSE ''
					END email_address,
					'' AS street_address
				FROM
					pcas_emailcontact pcasec
					JOIN pcas_account  pcasa ON pcasa.pcas_accountid = pcasec.pcas_accountid
					JOIN guardian g ON g.accountidentifier = pcasa.pcas_accounttoken
					JOIN guardianpersonassoc gpa ON gpa.guardianid = g.guardianid
					JOIN guardianstudent gs ON gs.guardianid = g.guardianid
					JOIN students stu ON stu.dcid = gs.studentsdcid
				WHERE
					stu.enroll_status in (-1,0)
					AND (
						'E' IN (:params) OR ('N' IN (:params) AND 'S' NOT IN (:params) AND 'P' NOT IN (:params))
					)
			)
		GROUP BY
			last_name_first_initial,
			mobile_phone,
			email_address,
			street_address
	) duplicates
WHERE
	contact_ids_duplicates LIKE '%,%'
ORDER BY
	contact_ids_duplicates	
			]]>
		</sql>
	</query>
</queries>